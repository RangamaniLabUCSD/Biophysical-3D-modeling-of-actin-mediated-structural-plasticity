function [S_int,var_0,ll_int,v_int] = solve_system_threshold_3D(S,T_s,var_0,t,J,ll_d,v_mm,P)
% obtain displacement of mesh according to the force generated by the
% membrane and the force generated by polymerization of actin
    delta_t = P.delta_t;
    count = 0;
    var_00 = var_0;
    

    [S_int,var_0] = solve_system_3D(S,T_s,var_00,t,delta_t,J,v_mm,P); 
    d_max = max(sqrt(dot(S_int-S,S_int-S,2)));
    
%     check if the diplacement of the vertices is less than d_tol,
%     otherwise half the time interval
    while d_max >  P.d_max_int
        delta_t = delta_t/2;
        [S_int,var_0] = solve_system_3D(S,T_s,var_00,t,delta_t,J,v_mm,P);
        d_max = max(sqrt(dot(S_int-S,S_int-S,2)));
        count = count+1;   
    end
%     disp(count)
    if count > 0
        for j=1:(2^count-1)
            [S_int,var_0] = solve_system_3D(S_int,T_s,var_0,t+j*delta_t,delta_t,J,v_mm,P);
        end
    end

    s1 = S_int(T_s(:,1),:);
    s2 = S_int(T_s(:,2),:);
    s3 = S_int(T_s(:,3),:);
    N = cross(s2-s1,s3-s1);
    p0 = (s1+s2+s3)/3;
    d = dot(p0-ll_d,N,2)./dot(repmat(P.l,size(N,1),1),N,2);
    
    dist = sqrt(dot(p0-ll_d,p0-ll_d,2));
    aux_d = unique(find(dist==min(dist)));
    
    ll_int = ll_d + P.l*d(aux_d);
    aux = (ll_int-ll_d)./P.delta_t;
    v_int = P.cte_v*(aux(1)>0).*sqrt(dot(aux,aux,2));
end